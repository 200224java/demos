DROP TABLE EMPLOYEES CASCADE CONSTRAINTS;
CREATE TABLE EMPLOYEES (
	employee_id NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	first_name VARCHAR2(50) NOT NULL CHECK (LENGTH(first_name) > 1),
 	last_name VARCHAR2(50) NOT NULL,
	email VARCHAR2(55) UNIQUE,
	salary NUMBER NOT NULL,
	title VARCHAR2(55)
);

INSERT INTO employees (first_name, last_name, salary, title)
  VALUES ('John', 'Smith', 50000, 'Employee');
INSERT INTO employees (first_name, last_name, email, salary, title)
  VALUES ('Jane', 'Doe', 'jane.doe@gmail.com', 150000, 'Administrator');
INSERT INTO employees (first_name, last_name, email, salary, title)
  VALUES ('Larry', 'Niven', 'larry.niven@gmail.com', 200000, 'Employee');
INSERT INTO employees (first_name, last_name, email, salary, title)
  VALUES ('Craig', 'Jones', 'craig.jones@work.com', 126000, 'Administrator');

DROP TABLE ACCOUNT CASCADE CONSTRAINTS;
CREATE TABLE ACCOUNT (
	id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	balance NUMBER(20, 2) DEFAULT 0 CHECK (balance >= 0),
	owner NUMBER REFERENCES employees (employee_id)
	-- NON UNIQUE foreign key creates a 1 to many relationship
);

INSERT INTO ACCOUNT (owner, balance) VALUES (4, 4561);
INSERT INTO ACCOUNT (owner) VALUES (4);
INSERT INTO ACCOUNT (owner, balance) VALUES (1, 13);

CREATE OR REPLACE PROCEDURE insert_into_emps(
	emp_id OUT NUMBER, emp_first IN VARCHAR2, emp_last IN VARCHAR2,
	emp_email IN VARCHAR2, emp_salary IN NUMBER, emp_title IN VARCHAR2
)
IS
BEGIN
	INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, EMAIL, SALARY, TITLE)
		VALUES (emp_first, emp_last, emp_email, emp_salary, emp_title)
		RETURNING employee_id
		INTO emp_id;
END;

CREATE OR REPLACE PROCEDURE insert_into_accounts(
	account_id OUT NUMBER, account_owner IN NUMBER
)
IS
BEGIN
	INSERT INTO ACCOUNT (owner)
		VALUES (account_owner)
		RETURNING id
		INTO account_id;
END;

CREATE OR REPLACE PROCEDURE transfer_funds(
	source_id IN NUMBER, target_id IN NUMBER, amount IN NUMBER
)
IS
	source_balance NUMBER;
	target_balance NUMBER;
BEGIN
	SELECT (balance - amount) INTO source_balance FROM ACCOUNT
		WHERE id = source_id;
	UPDATE ACCOUNT
		SET balance = source_balance
		WHERE id = source_id;
	
	SELECT (balance + amount) INTO target_balance FROM ACCOUNT
		WHERE id = target_id;
	UPDATE ACCOUNT
		SET balance = target_balance
		WHERE id = target_id;
	COMMIT;
END;